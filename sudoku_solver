#sudoku solver
# sample input: ,4,1,9,3,,,5,8,6,,9,,2,5,,4,,,2,8,7,1,,,3,6,,8,,,7,,,9,,3,,6,5,8,2,7,1,4,,,,6,9,3,8,2,5,,5,2,1,4,,,6,9,,,3,2,,8,4,7,1,,,,,6,,,8,2

#      Grid Relations                          Row Relations [grids]<-[rows]            Col Relations [grids]<-[cols]
# 0<-1,2,3,6; 1<-0,2,4,7; 2<-0,1,5,8                    0,1,2<-A,B,C                                0,3,6<-0,1,2
# 3<-0,4,5,6; 4<-1,3,5,7; 5<-2,3,4,8                    3,4,5<-D,E,F                                1,4,7<-3,4,5
# 6<-0,3,7,8; 7<-1,4,6,8; 8<-2,5,6,7                    6,7,8<-G,H,I                                2,5,8<-6,7,8

#grids=        [   0,       1,       2,       3,       4,       5,       6,       7,       8   ]
#rowscheck=    [[A,B,C], [A,B,C], [A,B,C], [D,E,F], [D,E,F], [D,E,F], [G,H,I], [G,H,I], [G,H,I]]
#colscheck=    [[0,1,2], [3,4,5], [6,7,8], [0,1,2], [3,4,5], [6,7,8], [0,1,2], [3,4,5], [6,7,8]]
#assume we are trying to fill in a 9 into grid 2.  This involves two row checks
#Already know that there is no 9 in grid 2.  Check if row A has a 9.  It does so there cannot be a 9 in row A.0th
#Check if row B has a 9.  It does so there cannot be a 9 in row B.  So the 9 must be in row C.
#Check how many 0's are in row C of the grid.  How to do that?  grid 2 is far right;
# so list[9-i]->list[9-i+2] gets the corresponding row elements in grid 2.  But this might lead to bugs.  does that work elsewhere?
# grid 1 is middle grid, so it wants rowX[3],rowX[4],rowX[5]


#new approach: use the old puzzleList structure, and perform math on it.  e.g. index % 9 will give you the column you want
#how to get the row you want?  switch statement or maybe dictionary
# could you use a dictionary saying index i is row x, col y, grid z?
# that sounds like a smarter solution.  consider making a new file and branch for this.
# hybrid approach: list storing indices e.b. rowB=[9,10,11,12,13,14,15,16,17] would make fillInNinth more clear

#grid numbers are straightforward:
# 0   1   2
# 3   4   5          grids that correspond with each other:
# 6   7   8

#    0 1 2   3 4 5   6 7 8      <-- col numbers

#A  |_|4|1| |9|3|_| |_|5|8|                 |00|01|02| |03|04|05| |06|07|08|
#B  |6|_|9| |_|2|5| |_|4|_|                 |09|10|11| |12|13|14| |15|16|17|
#C  |_|2|8| |7|1|_| |_|3|6|                 |18|19|20| |21|22|23| |24|25|26|
#
#D  |_|8|_| |_|7|_| |_|9|_|                 |27|28|29| |30|31|32| |33|34|35|
#E  |3|_|6| |5|8|2| |7|1|4|                 |36|37|38| |39|40|41| |42|43|44|
#F  |_|_|_| |6|9|3| |8|2|5|                 |45|46|47| |48|49|50| |51|52|53|
#
#G  |_|5|2| |1|4|_| |_|6|9|                 |54|55|56| |57|58|59| |60|61|62|
#H  |_|_|3| |2|_|8| |4|7|1|                 |63|64|65| |66|67|68| |69|70|71|
#I  |_|_|_| |_|6|_| |_|8|2|                 |72|73|74| |75|76|77| |78|79|80|
#
#^row letters

# TODO LIST
#1.  need an update method to call after each # is filled in so that minimum number of sets are constructed
#        Must be called after autoComplete
#        update method will update all three affected by most recent change
#2.  should I keep puzzleList as a global?  can't really see a reason to yet
#3   define globals A=0,B=1,C=2, etc. so you can use them for row referencing

def puzzleMaker(puzzle):
    puzzleList = puzzle.split(',')  # couldn't see how to pass as a list, so I made it a string and change it here
    for i in range(0, 81):
        if (puzzleList[i]) == '':
            puzzleList[i] = '0'
    for i in range(0, 81):            # these two loops aren't really necessary but now I can work with 0-9 instead of strings and blanks,
                                      # and that is more intuitive.
        puzzleList[i] = int(puzzleList[i])

    #defining everything for next step
    rowA, rowB, rowC, rowD, rowE, rowF, rowG, rowH, rowI = [], [], [], [], [], [], [], [], []  # seems cumbersome
    col1, col2, col3, col4, col5, col6, col7, col8, col9 = [], [], [], [], [], [], [], [], []  # will change this
    grid1, grid2, grid3, grid4, grid5, grid6, grid7, grid8, grid9 = [], [], [], [], [], [], [], [], []  # if I see a better way
    allRows, rowStartIndex = [rowA, rowB, rowC, rowD, rowE, rowF, rowG, rowH, rowI], [0, 9, 18, 27, 36, 45, 54, 63, 72]
    allCols, colStartIndex = [col1, col2, col3, col4, col5, col6, col7, col8, col9], [0, 1, 2, 3, 4, 5, 6, 7, 8]
    allGrids, gridStartIndex = [grid1, grid2, grid3, grid4, grid5, grid6, grid7, grid8, grid9], [0, 3, 6, 27, 30, 33, 54, 57, 60]

    #now build rows/cols/grids
    for i in range(0, len(allRows)):
        for j in range(rowStartIndex[i], (rowStartIndex[i] + 9)):  # Rows
            allRows[i].append(puzzleList[j])

    for i in range(0, len(allCols)):
        for j in range(colStartIndex[i], (colStartIndex[i] + 73), 9):  # Cols
            allCols[i].append(puzzleList[j])

    for i in range(0, len(allGrids)):
        for j in range(gridStartIndex[i], (gridStartIndex[i] + 19), 9):  # Grids
            allGrids[i].append(puzzleList[j])
            allGrids[i].append(puzzleList[j + 1])
            allGrids[i].append(puzzleList[j + 2])
    return allRows, allCols, allGrids


def fillInNinth(allRows, allCols, allGrids):
    completeSet = set([1, 2, 3, 4, 5, 6, 7, 8, 9])

    for i in range(0, 9):
        if (len(completeSet.difference(set(allRows[i])))) == 1:  # 8/9 are filled in, so we fill in the last
            for j in range(0, 9):
                if (allRows[i][j]) == 0:
                    allRows[i][j] = completeSet.difference(set(allRows[i])).pop()  # pop works: set is only 1 element
            #update

    for i in range(0, 9):
        if (len(completeSet.difference(set(allCols[i])))) == 1:
                if (allCols[i][j]) == 0:
                    allCols[i][j] = completeSet.difference(set(allCols[i])).pop()
            #update

    for i in range(0, 9):
        if (len(completeSet.difference(set(allGrids[i])))) == 1:
            for j in range(0, 9):
                if (allGrids[i][j]) == 0:
                    allGrids[i][j] = completeSet.difference(set(allGrids[i])).pop()
            #update


def frequencyCounter(allRows):  # helps determine what the best number to look at is
    frequency = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # note I'm using 10 values here, and skipping 0th
    #  so I can get indices to align (e.g. frequency[4] tells me how many times 4 currently appears in the puzzle)
    for i in range(0, 9):  # counting frequency of particular value
        for j in range(0, 9):  # iterates through rowA, rowB, etc
            for k in range(0, 9):  # iterates through each element in current row
                if allRows[j][k] == i + 1:
                    frequency[i + 1] = frequency[i + 1] + 1
    return frequency


def main():
    allRows, allCols, allGrids = puzzleMaker(",4,1,9,3,,,5,8,6,,9,,2,5,,4,,,2,8,7,1,,,3,6,,8,,,7,,,9,,3,,6,5,8,2,7,1,4,,,,6,9,3,8,2,5,,5,2,1,4,,,6,9,,,3,2,,8,4,7,1,,,,,6,,,8,2")
    fillInNinth(allRows, allCols, allGrids)
    frequency = frequencyCounter(allRows)

main()
